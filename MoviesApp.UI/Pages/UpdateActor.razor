@page "/UpdateActor"
@page "/UpdateActor/{id:int}"
@inject IActorUpdateService ActorUpdateService
@inject IAgentService AgentService
@inject IActorService ActorService

@if (id == null)
{
    <PageTitle>Create a new Super Actor</PageTitle>
    <h3>Create a new Super Actor</h3>
}
else
{
    <PageTitle>Edit @actor.FullName</PageTitle>
    <h3>Edit @actor.FullName</h3>
}

<EditForm Model="actor" OnSubmit="HandleSubmit">
    <div class="row">
         <div class="col-md-4">
        <label for="Name">Actor Name</label>
        <InputText id="Name" @bind-Value="actor.Name" class="form-control"></InputText>
        </div>
         <div class="col-md-4">
        <label for="Surname">Actor Surname</label>
        <InputText id="Surname" @bind-Value="actor.Surname" class="form-control"></InputText>
        </div>
        <div class="col-md-4">
        <label>Agent</label><br />
        <InputSelect @bind-Value="actor.AgentId" class="form-select">
            @foreach (var agent in AgentService.agents)
            {
                <option value="@agent.Id">@agent.CompanyName</option>
            }
        </InputSelect>
          </div>
          <div class="col-md-4">
        <br />
    <button type="submit" class="btn btn-primary form-check-inline">@btnText</button>
  </div>
    </div>
   
  
</EditForm>

@code {
    [Parameter]
    public int? id{ get; set; }

    string btnText = string.Empty;
    Actor actor = new Actor {  Agents = new Agent()};

    protected override async Task OnInitializedAsync()
    {
        btnText = id == null ? "Save New Actor" : "Update Actor";
        await AgentService.GetAgents();
    }
    protected override async Task OnParametersSetAsync()
    {
        if (id == null)
        {
            actor.Agents =  AgentService.agents[0];
            actor.AgentId = actor.Agents.Id;
        }
        else
        {
            actor = await ActorService.GetSingleActor((int)id);
        }
    }
    async Task HandleSubmit()
    {
        if(id==null)
        {
            await ActorUpdateService.CreateActor(actor); 
        }
        else
        {
            await ActorUpdateService.UpdateActor(actor);
        }
    }
}
